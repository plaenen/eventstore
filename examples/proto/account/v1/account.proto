syntax = "proto3";

package account.v1;

option go_package = "github.com/plaenen/eventstore/examples/pb/account/v1;accountv1";

import "eventsourcing/options.proto";

// ============================================================================
// SIMPLIFIED OPTIONS - New Format
// ============================================================================
// Service declares aggregate name + root message (single source of truth)
// Commands have NO options (inherit from service)
// Events have minimal options (just aggregate_name)
// Aggregate root has minimal options (just id_field)
// ============================================================================

// AccountCommandService handles write operations (commands)
service AccountCommandService {
  option (eventsourcing.service) = {
    aggregate_name: "Account"
    aggregate_root_message: "Account"
  };

  // OpenAccount creates a new bank account
  rpc OpenAccount(OpenAccountCommand) returns (OpenAccountResponse);

  // Deposit adds money to an account
  rpc Deposit(DepositCommand) returns (DepositResponse);

  // Withdraw removes money from an account
  rpc Withdraw(WithdrawCommand) returns (WithdrawResponse);

  // CloseAccount closes an existing account
  rpc CloseAccount(CloseAccountCommand) returns (CloseAccountResponse);
}

// AccountQueryService handles read operations (queries)
service AccountQueryService {
  // GetAccount retrieves account details by ID
  rpc GetAccount(GetAccountRequest) returns (AccountView);

  // ListAccounts retrieves all accounts with pagination
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);

  // GetAccountBalance retrieves just the balance
  rpc GetAccountBalance(GetAccountBalanceRequest) returns (BalanceView);

  // GetAccountHistory retrieves transaction history
  rpc GetAccountHistory(GetAccountHistoryRequest) returns (AccountHistoryResponse);
}

// ============================================================================
// Commands (Write Side) - NO OPTIONS! Everything inherited from service
// ============================================================================

message OpenAccountCommand {
  // No options needed - aggregate inherited from service
  // Unique constraints handled in command handler code

  string account_id = 1;
  string owner_name = 2;
  string initial_balance = 3; // Decimal as string
}

message OpenAccountResponse {
  string account_id = 1;
  int64 version = 2;
}

message DepositCommand {
  // No options needed

  string account_id = 1;
  string amount = 2;
}

message DepositResponse {
  string new_balance = 1;
  int64 version = 2;
}

message WithdrawCommand {
  // No options needed

  string account_id = 1;
  string amount = 2;
}

message WithdrawResponse {
  string new_balance = 1;
  int64 version = 2;
}

message CloseAccountCommand {
  // No options needed - constraint release handled in handler

  string account_id = 1;
}

message CloseAccountResponse {
  string final_balance = 1;
  int64 version = 2;
}

// Queries (Read Side)

message GetAccountRequest {
  string account_id = 1;
}

message AccountView {
  string account_id = 1;
  string owner_name = 2;
  string balance = 3;
  AccountStatus status = 4;
  int64 version = 5;
  int64 created_at = 6;
  int64 updated_at = 7;
}

message ListAccountsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListAccountsResponse {
  repeated AccountView accounts = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message GetAccountBalanceRequest {
  string account_id = 1;
}

message BalanceView {
  string account_id = 1;
  string balance = 2;
  int64 version = 3;
}

message GetAccountHistoryRequest {
  string account_id = 1;
  int32 limit = 2;
}

message AccountHistoryResponse {
  repeated TransactionView transactions = 1;
}

message TransactionView {
  string transaction_id = 1;
  TransactionType type = 2;
  string amount = 3;
  string balance_after = 4;
  int64 timestamp = 5;
}

enum AccountStatus {
  ACCOUNT_STATUS_UNSPECIFIED = 0;
  ACCOUNT_STATUS_OPEN = 1;
  ACCOUNT_STATUS_CLOSED = 2;
}

enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  TRANSACTION_TYPE_OPENED = 1;
  TRANSACTION_TYPE_DEPOSIT = 2;
  TRANSACTION_TYPE_WITHDRAWAL = 3;
  TRANSACTION_TYPE_CLOSED = 4;
}

// ============================================================================
// Aggregate State (Domain Model) - Minimal options (just id_field)
// ============================================================================

message Account {
  option (eventsourcing.aggregate_root) = {
    id_field: "account_id"
  };

  string account_id = 1;
  string owner_name = 2;
  string balance = 3;
  AccountStatus status = 4;

  // NEW FIELDS demonstrating proto field evolution for upcasting
  string currency = 5;  // Added later - defaults to "" for old snapshots
  int64 created_at = 6; // Added later - defaults to 0 for old snapshots
}

// ============================================================================
// Events (Internal - used for event sourcing)
// ============================================================================
// Minimal options (just aggregate_name)
// Field mapping handled in ApplyEvent implementation
// Demonstrates proto field evolution for upcasting use cases
// ============================================================================

message AccountOpenedEvent {
  option (eventsourcing.event) = {
    aggregate_name: "Account"
  };

  string account_id = 1;
  string owner_name = 2;

  // FIELD EVOLUTION EXAMPLE: Field renamed over time
  string initial_balance = 3 [deprecated = true];  // V1: Old field name
  string opening_amount = 7;                       // V2: New field name

  // NEW FIELDS: Added in V2
  string currency = 5;     // Defaults to "" for V1 events
  int64 created_at = 6;    // Defaults to 0 for V1 events

  int64 timestamp = 4;
}

message MoneyDepositedEvent {
  option (eventsourcing.event) = {
    aggregate_name: "Account"
  };

  string account_id = 1;
  string amount = 2;
  string new_balance = 3;
  int64 timestamp = 4;
}

message MoneyWithdrawnEvent {
  option (eventsourcing.event) = {
    aggregate_name: "Account"
  };

  string account_id = 1;
  string amount = 2;
  string new_balance = 3;
  int64 timestamp = 4;
}

message AccountClosedEvent {
  option (eventsourcing.event) = {
    aggregate_name: "Account"
  };

  string account_id = 1;
  string final_balance = 2;
  int64 timestamp = 3;
}

// ============================================================================
// OLD EVENT VERSIONS - For upcasting demonstration
// ============================================================================
// These represent old event versions from before schema evolution
// The aggregate's UpcastEvent method will convert these to current versions
// ============================================================================

message AccountOpenedEventV1 {
  option (eventsourcing.event) = {
    aggregate_name: "Account"
  };

  string account_id = 1;
  string owner_name = 2;
  string initial_balance = 3;  // Old field name
  int64 timestamp = 4;
  // Missing: currency, created_at, opening_amount
}
