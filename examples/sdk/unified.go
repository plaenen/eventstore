// Code generated by generate-unified-sdk. DO NOT EDIT.

package sdk

import (
	accountv1 "github.com/plaenen/eventstore/examples/pb/account/v1"
	"github.com/plaenen/eventstore/pkg/eventsourcing"
)

// SDK provides a unified interface to all services in the application.
// It combines all service SDKs into a single client that only requires one transport.
//
// Example usage:
//
//	transport, _ := nats.NewTransport(&nats.TransportConfig{...})
//	sdk := NewSDK(transport)
//	defer sdk.Close()
//
//	// Use any service
//	sdk.Account.OpenAccount(ctx, cmd)
type SDK struct {
	// Account provides access to Account service operations
	Account *accountv1.AccountSDK

	transport eventsourcing.Transport
}

// NewSDK creates a new unified SDK that combines all services.
// It only requires a single transport - all service SDKs are created automatically.
func NewSDK(transport eventsourcing.Transport) *SDK {
	return &SDK{
		Account:   accountv1.NewAccountSDK(transport),
		transport: transport,
	}
}

// Transport returns the underlying transport used by all service SDKs.
// This can be useful for advanced use cases or debugging.
func (s *SDK) Transport() eventsourcing.Transport {
	return s.transport
}

// Close closes the underlying transport connection.
// This will close the connection for all service SDKs.
func (s *SDK) Close() error {
	return s.transport.Close()
}
