// Code generated by protoc-gen-eventsourcing. DO NOT EDIT.
// version: 0.0.5
// Unified SDK for v1

package accountv1

import (
	"context"

	"github.com/plaenen/eventstore/pkg/eventsourcing"
)

// AccountSDK provides a unified, developer-friendly interface for the Account service.
// It combines all commands and queries into a single client that only requires a transport.
//
// Example usage:
//
//	transport, _ := nats.NewTransport(&nats.TransportConfig{...})
//	sdk := accountv1.NewAccountSDK(transport)
//
//	// Execute commands and queries
//	resp, err := sdk.OpenAccount(ctx, &accountv1.OpenAccountCommand{...})
type AccountSDK struct {
	client *AccountClient
}

// NewAccountSDK creates a new unified SDK for the Account service.
// It only requires a transport - all service clients are created automatically.
func NewAccountSDK(transport eventsourcing.Transport) *AccountSDK {
	return &AccountSDK{
		client: NewAccountClient(transport),
	}
}

// Commands

// OpenAccount opens account
func (s *AccountSDK) OpenAccount(ctx context.Context, cmd *OpenAccountCommand) (*OpenAccountResponse, *eventsourcing.AppError) {
	return s.client.OpenAccount(ctx, cmd)
}

// Deposit adds money to an account
func (s *AccountSDK) Deposit(ctx context.Context, cmd *DepositCommand) (*DepositResponse, *eventsourcing.AppError) {
	return s.client.Deposit(ctx, cmd)
}

// Withdraw removes money from an account
func (s *AccountSDK) Withdraw(ctx context.Context, cmd *WithdrawCommand) (*WithdrawResponse, *eventsourcing.AppError) {
	return s.client.Withdraw(ctx, cmd)
}

// CloseAccount closes account
func (s *AccountSDK) CloseAccount(ctx context.Context, cmd *CloseAccountCommand) (*CloseAccountResponse, *eventsourcing.AppError) {
	return s.client.CloseAccount(ctx, cmd)
}

// Queries

// GetAccount retrieves account
func (s *AccountSDK) GetAccount(ctx context.Context, query *GetAccountRequest) (*AccountView, *eventsourcing.AppError) {
	return s.client.GetAccount(ctx, query)
}

// ListAccounts lists accounts
func (s *AccountSDK) ListAccounts(ctx context.Context, query *ListAccountsRequest) (*ListAccountsResponse, *eventsourcing.AppError) {
	return s.client.ListAccounts(ctx, query)
}

// GetAccountBalance retrieves accountbalance
func (s *AccountSDK) GetAccountBalance(ctx context.Context, query *GetAccountBalanceRequest) (*BalanceView, *eventsourcing.AppError) {
	return s.client.GetAccountBalance(ctx, query)
}

// GetAccountHistory retrieves accounthistory
func (s *AccountSDK) GetAccountHistory(ctx context.Context, query *GetAccountHistoryRequest) (*AccountHistoryResponse, *eventsourcing.AppError) {
	return s.client.GetAccountHistory(ctx, query)
}

// Transport returns the underlying transport used by this SDK.
// This can be useful for cleanup or advanced use cases.
func (s *AccountSDK) Transport() eventsourcing.Transport {
	return s.client.transport
}

// Close closes the underlying transport connection.
// This is a convenience method equivalent to calling Transport().Close()
func (s *AccountSDK) Close() error {
	return s.client.transport.Close()
}
