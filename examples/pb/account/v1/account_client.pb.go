// Code generated by protoc-gen-eventsourcing. DO NOT EDIT.
// Client SDK for v1

package accountv1

import (
	"context"

	"github.com/plaenen/eventsourcing/pkg/eventsourcing"
)

// AccountClient provides type-safe methods for Account commands and queries
type AccountClient struct {
	transport eventsourcing.Transport
}

// NewAccountClient creates a new type-safe client for Account
func NewAccountClient(transport eventsourcing.Transport) *AccountClient {
	return &AccountClient{transport: transport}
}

// OpenAccount sends a OpenAccount command and returns the response
func (c *AccountClient) OpenAccount(ctx context.Context, cmd *OpenAccountCommand) (*OpenAccountResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountCommandService.OpenAccount", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &OpenAccountResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// Deposit sends a Deposit command and returns the response
func (c *AccountClient) Deposit(ctx context.Context, cmd *DepositCommand) (*DepositResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountCommandService.Deposit", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &DepositResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// Withdraw sends a Withdraw command and returns the response
func (c *AccountClient) Withdraw(ctx context.Context, cmd *WithdrawCommand) (*WithdrawResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountCommandService.Withdraw", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &WithdrawResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// CloseAccount sends a CloseAccount command and returns the response
func (c *AccountClient) CloseAccount(ctx context.Context, cmd *CloseAccountCommand) (*CloseAccountResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountCommandService.CloseAccount", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &CloseAccountResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// GetAccount executes a GetAccount query and returns the result
func (c *AccountClient) GetAccount(ctx context.Context, query *GetAccountRequest) (*AccountView, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountQueryService.GetAccount", query)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &AccountView{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// ListAccounts executes a ListAccounts query and returns the result
func (c *AccountClient) ListAccounts(ctx context.Context, query *ListAccountsRequest) (*ListAccountsResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountQueryService.ListAccounts", query)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &ListAccountsResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// GetAccountBalance executes a GetAccountBalance query and returns the result
func (c *AccountClient) GetAccountBalance(ctx context.Context, query *GetAccountBalanceRequest) (*BalanceView, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountQueryService.GetAccountBalance", query)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &BalanceView{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// GetAccountHistory executes a GetAccountHistory query and returns the result
func (c *AccountClient) GetAccountHistory(ctx context.Context, query *GetAccountHistoryRequest) (*AccountHistoryResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "account.v1.AccountQueryService.GetAccountHistory", query)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &AccountHistoryResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}
