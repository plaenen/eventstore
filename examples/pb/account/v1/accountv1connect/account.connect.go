// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: account/v1/account.proto

package accountv1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"
	v1 "github.com/plaenen/eventstore/examples/pb/account/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountCommandServiceName is the fully-qualified name of the AccountCommandService service.
	AccountCommandServiceName = "account.v1.AccountCommandService"
	// AccountQueryServiceName is the fully-qualified name of the AccountQueryService service.
	AccountQueryServiceName = "account.v1.AccountQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountCommandServiceOpenAccountProcedure is the fully-qualified name of the
	// AccountCommandService's OpenAccount RPC.
	AccountCommandServiceOpenAccountProcedure = "/account.v1.AccountCommandService/OpenAccount"
	// AccountCommandServiceDepositProcedure is the fully-qualified name of the AccountCommandService's
	// Deposit RPC.
	AccountCommandServiceDepositProcedure = "/account.v1.AccountCommandService/Deposit"
	// AccountCommandServiceWithdrawProcedure is the fully-qualified name of the AccountCommandService's
	// Withdraw RPC.
	AccountCommandServiceWithdrawProcedure = "/account.v1.AccountCommandService/Withdraw"
	// AccountCommandServiceCloseAccountProcedure is the fully-qualified name of the
	// AccountCommandService's CloseAccount RPC.
	AccountCommandServiceCloseAccountProcedure = "/account.v1.AccountCommandService/CloseAccount"
	// AccountQueryServiceGetAccountProcedure is the fully-qualified name of the AccountQueryService's
	// GetAccount RPC.
	AccountQueryServiceGetAccountProcedure = "/account.v1.AccountQueryService/GetAccount"
	// AccountQueryServiceListAccountsProcedure is the fully-qualified name of the AccountQueryService's
	// ListAccounts RPC.
	AccountQueryServiceListAccountsProcedure = "/account.v1.AccountQueryService/ListAccounts"
	// AccountQueryServiceGetAccountBalanceProcedure is the fully-qualified name of the
	// AccountQueryService's GetAccountBalance RPC.
	AccountQueryServiceGetAccountBalanceProcedure = "/account.v1.AccountQueryService/GetAccountBalance"
	// AccountQueryServiceGetAccountHistoryProcedure is the fully-qualified name of the
	// AccountQueryService's GetAccountHistory RPC.
	AccountQueryServiceGetAccountHistoryProcedure = "/account.v1.AccountQueryService/GetAccountHistory"
)

// AccountCommandServiceClient is a client for the account.v1.AccountCommandService service.
type AccountCommandServiceClient interface {
	// OpenAccount creates a new bank account
	OpenAccount(context.Context, *connect.Request[v1.OpenAccountCommand]) (*connect.Response[v1.OpenAccountResponse], error)
	// Deposit adds money to an account
	Deposit(context.Context, *connect.Request[v1.DepositCommand]) (*connect.Response[v1.DepositResponse], error)
	// Withdraw removes money from an account
	Withdraw(context.Context, *connect.Request[v1.WithdrawCommand]) (*connect.Response[v1.WithdrawResponse], error)
	// CloseAccount closes an existing account
	CloseAccount(context.Context, *connect.Request[v1.CloseAccountCommand]) (*connect.Response[v1.CloseAccountResponse], error)
}

// NewAccountCommandServiceClient constructs a client for the account.v1.AccountCommandService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountCommandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountCommandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountCommandServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountCommandService").Methods()
	return &accountCommandServiceClient{
		openAccount: connect.NewClient[v1.OpenAccountCommand, v1.OpenAccountResponse](
			httpClient,
			baseURL+AccountCommandServiceOpenAccountProcedure,
			connect.WithSchema(accountCommandServiceMethods.ByName("OpenAccount")),
			connect.WithClientOptions(opts...),
		),
		deposit: connect.NewClient[v1.DepositCommand, v1.DepositResponse](
			httpClient,
			baseURL+AccountCommandServiceDepositProcedure,
			connect.WithSchema(accountCommandServiceMethods.ByName("Deposit")),
			connect.WithClientOptions(opts...),
		),
		withdraw: connect.NewClient[v1.WithdrawCommand, v1.WithdrawResponse](
			httpClient,
			baseURL+AccountCommandServiceWithdrawProcedure,
			connect.WithSchema(accountCommandServiceMethods.ByName("Withdraw")),
			connect.WithClientOptions(opts...),
		),
		closeAccount: connect.NewClient[v1.CloseAccountCommand, v1.CloseAccountResponse](
			httpClient,
			baseURL+AccountCommandServiceCloseAccountProcedure,
			connect.WithSchema(accountCommandServiceMethods.ByName("CloseAccount")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountCommandServiceClient implements AccountCommandServiceClient.
type accountCommandServiceClient struct {
	openAccount  *connect.Client[v1.OpenAccountCommand, v1.OpenAccountResponse]
	deposit      *connect.Client[v1.DepositCommand, v1.DepositResponse]
	withdraw     *connect.Client[v1.WithdrawCommand, v1.WithdrawResponse]
	closeAccount *connect.Client[v1.CloseAccountCommand, v1.CloseAccountResponse]
}

// OpenAccount calls account.v1.AccountCommandService.OpenAccount.
func (c *accountCommandServiceClient) OpenAccount(ctx context.Context, req *connect.Request[v1.OpenAccountCommand]) (*connect.Response[v1.OpenAccountResponse], error) {
	return c.openAccount.CallUnary(ctx, req)
}

// Deposit calls account.v1.AccountCommandService.Deposit.
func (c *accountCommandServiceClient) Deposit(ctx context.Context, req *connect.Request[v1.DepositCommand]) (*connect.Response[v1.DepositResponse], error) {
	return c.deposit.CallUnary(ctx, req)
}

// Withdraw calls account.v1.AccountCommandService.Withdraw.
func (c *accountCommandServiceClient) Withdraw(ctx context.Context, req *connect.Request[v1.WithdrawCommand]) (*connect.Response[v1.WithdrawResponse], error) {
	return c.withdraw.CallUnary(ctx, req)
}

// CloseAccount calls account.v1.AccountCommandService.CloseAccount.
func (c *accountCommandServiceClient) CloseAccount(ctx context.Context, req *connect.Request[v1.CloseAccountCommand]) (*connect.Response[v1.CloseAccountResponse], error) {
	return c.closeAccount.CallUnary(ctx, req)
}

// AccountCommandServiceHandler is an implementation of the account.v1.AccountCommandService
// service.
type AccountCommandServiceHandler interface {
	// OpenAccount creates a new bank account
	OpenAccount(context.Context, *connect.Request[v1.OpenAccountCommand]) (*connect.Response[v1.OpenAccountResponse], error)
	// Deposit adds money to an account
	Deposit(context.Context, *connect.Request[v1.DepositCommand]) (*connect.Response[v1.DepositResponse], error)
	// Withdraw removes money from an account
	Withdraw(context.Context, *connect.Request[v1.WithdrawCommand]) (*connect.Response[v1.WithdrawResponse], error)
	// CloseAccount closes an existing account
	CloseAccount(context.Context, *connect.Request[v1.CloseAccountCommand]) (*connect.Response[v1.CloseAccountResponse], error)
}

// NewAccountCommandServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountCommandServiceHandler(svc AccountCommandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountCommandServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountCommandService").Methods()
	accountCommandServiceOpenAccountHandler := connect.NewUnaryHandler(
		AccountCommandServiceOpenAccountProcedure,
		svc.OpenAccount,
		connect.WithSchema(accountCommandServiceMethods.ByName("OpenAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountCommandServiceDepositHandler := connect.NewUnaryHandler(
		AccountCommandServiceDepositProcedure,
		svc.Deposit,
		connect.WithSchema(accountCommandServiceMethods.ByName("Deposit")),
		connect.WithHandlerOptions(opts...),
	)
	accountCommandServiceWithdrawHandler := connect.NewUnaryHandler(
		AccountCommandServiceWithdrawProcedure,
		svc.Withdraw,
		connect.WithSchema(accountCommandServiceMethods.ByName("Withdraw")),
		connect.WithHandlerOptions(opts...),
	)
	accountCommandServiceCloseAccountHandler := connect.NewUnaryHandler(
		AccountCommandServiceCloseAccountProcedure,
		svc.CloseAccount,
		connect.WithSchema(accountCommandServiceMethods.ByName("CloseAccount")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.v1.AccountCommandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountCommandServiceOpenAccountProcedure:
			accountCommandServiceOpenAccountHandler.ServeHTTP(w, r)
		case AccountCommandServiceDepositProcedure:
			accountCommandServiceDepositHandler.ServeHTTP(w, r)
		case AccountCommandServiceWithdrawProcedure:
			accountCommandServiceWithdrawHandler.ServeHTTP(w, r)
		case AccountCommandServiceCloseAccountProcedure:
			accountCommandServiceCloseAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountCommandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountCommandServiceHandler struct{}

func (UnimplementedAccountCommandServiceHandler) OpenAccount(context.Context, *connect.Request[v1.OpenAccountCommand]) (*connect.Response[v1.OpenAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountCommandService.OpenAccount is not implemented"))
}

func (UnimplementedAccountCommandServiceHandler) Deposit(context.Context, *connect.Request[v1.DepositCommand]) (*connect.Response[v1.DepositResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountCommandService.Deposit is not implemented"))
}

func (UnimplementedAccountCommandServiceHandler) Withdraw(context.Context, *connect.Request[v1.WithdrawCommand]) (*connect.Response[v1.WithdrawResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountCommandService.Withdraw is not implemented"))
}

func (UnimplementedAccountCommandServiceHandler) CloseAccount(context.Context, *connect.Request[v1.CloseAccountCommand]) (*connect.Response[v1.CloseAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountCommandService.CloseAccount is not implemented"))
}

// AccountQueryServiceClient is a client for the account.v1.AccountQueryService service.
type AccountQueryServiceClient interface {
	// GetAccount retrieves account details by ID
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.AccountView], error)
	// ListAccounts retrieves all accounts with pagination
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	// GetAccountBalance retrieves just the balance
	GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.BalanceView], error)
	// GetAccountHistory retrieves transaction history
	GetAccountHistory(context.Context, *connect.Request[v1.GetAccountHistoryRequest]) (*connect.Response[v1.AccountHistoryResponse], error)
}

// NewAccountQueryServiceClient constructs a client for the account.v1.AccountQueryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountQueryServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountQueryService").Methods()
	return &accountQueryServiceClient{
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.AccountView](
			httpClient,
			baseURL+AccountQueryServiceGetAccountProcedure,
			connect.WithSchema(accountQueryServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		listAccounts: connect.NewClient[v1.ListAccountsRequest, v1.ListAccountsResponse](
			httpClient,
			baseURL+AccountQueryServiceListAccountsProcedure,
			connect.WithSchema(accountQueryServiceMethods.ByName("ListAccounts")),
			connect.WithClientOptions(opts...),
		),
		getAccountBalance: connect.NewClient[v1.GetAccountBalanceRequest, v1.BalanceView](
			httpClient,
			baseURL+AccountQueryServiceGetAccountBalanceProcedure,
			connect.WithSchema(accountQueryServiceMethods.ByName("GetAccountBalance")),
			connect.WithClientOptions(opts...),
		),
		getAccountHistory: connect.NewClient[v1.GetAccountHistoryRequest, v1.AccountHistoryResponse](
			httpClient,
			baseURL+AccountQueryServiceGetAccountHistoryProcedure,
			connect.WithSchema(accountQueryServiceMethods.ByName("GetAccountHistory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountQueryServiceClient implements AccountQueryServiceClient.
type accountQueryServiceClient struct {
	getAccount        *connect.Client[v1.GetAccountRequest, v1.AccountView]
	listAccounts      *connect.Client[v1.ListAccountsRequest, v1.ListAccountsResponse]
	getAccountBalance *connect.Client[v1.GetAccountBalanceRequest, v1.BalanceView]
	getAccountHistory *connect.Client[v1.GetAccountHistoryRequest, v1.AccountHistoryResponse]
}

// GetAccount calls account.v1.AccountQueryService.GetAccount.
func (c *accountQueryServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.AccountView], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// ListAccounts calls account.v1.AccountQueryService.ListAccounts.
func (c *accountQueryServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// GetAccountBalance calls account.v1.AccountQueryService.GetAccountBalance.
func (c *accountQueryServiceClient) GetAccountBalance(ctx context.Context, req *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.BalanceView], error) {
	return c.getAccountBalance.CallUnary(ctx, req)
}

// GetAccountHistory calls account.v1.AccountQueryService.GetAccountHistory.
func (c *accountQueryServiceClient) GetAccountHistory(ctx context.Context, req *connect.Request[v1.GetAccountHistoryRequest]) (*connect.Response[v1.AccountHistoryResponse], error) {
	return c.getAccountHistory.CallUnary(ctx, req)
}

// AccountQueryServiceHandler is an implementation of the account.v1.AccountQueryService service.
type AccountQueryServiceHandler interface {
	// GetAccount retrieves account details by ID
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.AccountView], error)
	// ListAccounts retrieves all accounts with pagination
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	// GetAccountBalance retrieves just the balance
	GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.BalanceView], error)
	// GetAccountHistory retrieves transaction history
	GetAccountHistory(context.Context, *connect.Request[v1.GetAccountHistoryRequest]) (*connect.Response[v1.AccountHistoryResponse], error)
}

// NewAccountQueryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountQueryServiceHandler(svc AccountQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountQueryServiceMethods := v1.File_account_v1_account_proto.Services().ByName("AccountQueryService").Methods()
	accountQueryServiceGetAccountHandler := connect.NewUnaryHandler(
		AccountQueryServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(accountQueryServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountQueryServiceListAccountsHandler := connect.NewUnaryHandler(
		AccountQueryServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(accountQueryServiceMethods.ByName("ListAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	accountQueryServiceGetAccountBalanceHandler := connect.NewUnaryHandler(
		AccountQueryServiceGetAccountBalanceProcedure,
		svc.GetAccountBalance,
		connect.WithSchema(accountQueryServiceMethods.ByName("GetAccountBalance")),
		connect.WithHandlerOptions(opts...),
	)
	accountQueryServiceGetAccountHistoryHandler := connect.NewUnaryHandler(
		AccountQueryServiceGetAccountHistoryProcedure,
		svc.GetAccountHistory,
		connect.WithSchema(accountQueryServiceMethods.ByName("GetAccountHistory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.v1.AccountQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountQueryServiceGetAccountProcedure:
			accountQueryServiceGetAccountHandler.ServeHTTP(w, r)
		case AccountQueryServiceListAccountsProcedure:
			accountQueryServiceListAccountsHandler.ServeHTTP(w, r)
		case AccountQueryServiceGetAccountBalanceProcedure:
			accountQueryServiceGetAccountBalanceHandler.ServeHTTP(w, r)
		case AccountQueryServiceGetAccountHistoryProcedure:
			accountQueryServiceGetAccountHistoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountQueryServiceHandler struct{}

func (UnimplementedAccountQueryServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.AccountView], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountQueryService.GetAccount is not implemented"))
}

func (UnimplementedAccountQueryServiceHandler) ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountQueryService.ListAccounts is not implemented"))
}

func (UnimplementedAccountQueryServiceHandler) GetAccountBalance(context.Context, *connect.Request[v1.GetAccountBalanceRequest]) (*connect.Response[v1.BalanceView], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountQueryService.GetAccountBalance is not implemented"))
}

func (UnimplementedAccountQueryServiceHandler) GetAccountHistory(context.Context, *connect.Request[v1.GetAccountHistoryRequest]) (*connect.Response[v1.AccountHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountQueryService.GetAccountHistory is not implemented"))
}
