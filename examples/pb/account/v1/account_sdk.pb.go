// Code generated by protoc-gen-eventsourcing. DO NOT EDIT.

package accountv1

import (
	"context"
	"fmt"

	"github.com/plaenen/eventsourcing/pkg/eventsourcing"
	"github.com/plaenen/eventsourcing/pkg/sdk"
)

// AccountClient provides type-safe methods for Account commands and queries
type AccountClient struct {
	sdk *sdk.Client
}

// NewAccountClient creates a new type-safe client for Account
func NewAccountClient(sdkClient *sdk.Client) *AccountClient {
	return &AccountClient{sdk: sdkClient}
}

// OpenAccount sends a OpenAccount command
func (c *AccountClient) OpenAccount(ctx context.Context, req *OpenAccountCommand, principalID string) (*OpenAccountResponse, error) {
	metadata := eventsourcing.CommandMetadata{
		CommandID:     eventsourcing.GenerateID(),
		CorrelationID: eventsourcing.GenerateID(),
		PrincipalID:   principalID,
	}

	err := c.sdk.SendCommand(ctx, req.AccountId, req, metadata)
	if err != nil {
		return nil, fmt.Errorf("failed to send command: %w", err)
	}

	// In a real implementation, you might want to return the response from the command bus
	return &OpenAccountResponse{}, nil
}

// Deposit sends a Deposit command
func (c *AccountClient) Deposit(ctx context.Context, req *DepositCommand, principalID string) (*DepositResponse, error) {
	metadata := eventsourcing.CommandMetadata{
		CommandID:     eventsourcing.GenerateID(),
		CorrelationID: eventsourcing.GenerateID(),
		PrincipalID:   principalID,
	}

	err := c.sdk.SendCommand(ctx, req.AccountId, req, metadata)
	if err != nil {
		return nil, fmt.Errorf("failed to send command: %w", err)
	}

	// In a real implementation, you might want to return the response from the command bus
	return &DepositResponse{}, nil
}

// Withdraw sends a Withdraw command
func (c *AccountClient) Withdraw(ctx context.Context, req *WithdrawCommand, principalID string) (*WithdrawResponse, error) {
	metadata := eventsourcing.CommandMetadata{
		CommandID:     eventsourcing.GenerateID(),
		CorrelationID: eventsourcing.GenerateID(),
		PrincipalID:   principalID,
	}

	err := c.sdk.SendCommand(ctx, req.AccountId, req, metadata)
	if err != nil {
		return nil, fmt.Errorf("failed to send command: %w", err)
	}

	// In a real implementation, you might want to return the response from the command bus
	return &WithdrawResponse{}, nil
}

// CloseAccount sends a CloseAccount command
func (c *AccountClient) CloseAccount(ctx context.Context, req *CloseAccountCommand, principalID string) (*CloseAccountResponse, error) {
	metadata := eventsourcing.CommandMetadata{
		CommandID:     eventsourcing.GenerateID(),
		CorrelationID: eventsourcing.GenerateID(),
		PrincipalID:   principalID,
	}

	err := c.sdk.SendCommand(ctx, req.AccountId, req, metadata)
	if err != nil {
		return nil, fmt.Errorf("failed to send command: %w", err)
	}

	// In a real implementation, you might want to return the response from the command bus
	return &CloseAccountResponse{}, nil
}

// GetAccount executes a GetAccount query
func (c *AccountClient) GetAccount(ctx context.Context, req *GetAccountRequest) (*AccountView, error) {
	// Query implementation would go here
	// For now, this is a placeholder showing the generated API
	return nil, fmt.Errorf("query not implemented: GetAccount")
}

// ListAccounts executes a ListAccounts query
func (c *AccountClient) ListAccounts(ctx context.Context, req *ListAccountsRequest) (*ListAccountsResponse, error) {
	// Query implementation would go here
	// For now, this is a placeholder showing the generated API
	return nil, fmt.Errorf("query not implemented: ListAccounts")
}

// GetAccountBalance executes a GetAccountBalance query
func (c *AccountClient) GetAccountBalance(ctx context.Context, req *GetAccountBalanceRequest) (*BalanceView, error) {
	// Query implementation would go here
	// For now, this is a placeholder showing the generated API
	return nil, fmt.Errorf("query not implemented: GetAccountBalance")
}

// GetAccountHistory executes a GetAccountHistory query
func (c *AccountClient) GetAccountHistory(ctx context.Context, req *GetAccountHistoryRequest) (*AccountHistoryResponse, error) {
	// Query implementation would go here
	// For now, this is a placeholder showing the generated API
	return nil, fmt.Errorf("query not implemented: GetAccountHistory")
}
