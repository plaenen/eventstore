// Code generated by protoc-gen-eventsourcing. DO NOT EDIT.
// Client SDK for v1

package subscriptionv1

import (
	"context"

	"github.com/plaenen/eventstore/pkg/eventsourcing"
)

// SubscriptionClient provides type-safe methods for Subscription commands and queries
type SubscriptionClient struct {
	transport eventsourcing.Transport
}

// NewSubscriptionClient creates a new type-safe client for Subscription
func NewSubscriptionClient(transport eventsourcing.Transport) *SubscriptionClient {
	return &SubscriptionClient{transport: transport}
}

// CreateSubscription sends a CreateSubscription command and returns the response
func (c *SubscriptionClient) CreateSubscription(ctx context.Context, cmd *CreateSubscriptionCommand) (*CreateSubscriptionResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "subscription.v1.SubscriptionCommandService.CreateSubscription", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &CreateSubscriptionResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// CancelSubscription sends a CancelSubscription command and returns the response
func (c *SubscriptionClient) CancelSubscription(ctx context.Context, cmd *CancelSubscriptionCommand) (*CancelSubscriptionResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "subscription.v1.SubscriptionCommandService.CancelSubscription", cmd)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &CancelSubscriptionResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}

// GetSubscription executes a GetSubscription query and returns the result
func (c *SubscriptionClient) GetSubscription(ctx context.Context, query *GetSubscriptionRequest) (*GetSubscriptionResponse, *eventsourcing.AppError) {
	// Send request via transport
	resp, err := c.transport.Request(ctx, "subscription.v1.SubscriptionQueryService.GetSubscription", query)
	if err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "TRANSPORT_ERROR",
			Message: err.Error(),
		}
	}

	// Check if request succeeded
	if !resp.Success {
		return nil, resp.GetError()
	}

	// Unpack response data
	result := &GetSubscriptionResponse{}
	if err := resp.UnpackData(result); err != nil {
		return nil, &eventsourcing.AppError{
			Code:    "INVALID_RESPONSE",
			Message: err.Error(),
		}
	}

	return result, nil
}
