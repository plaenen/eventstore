// Code generated by protoc-gen-eventsourcing. DO NOT EDIT.
// Unified SDK for v1

package subscriptionv1

import (
	"context"

	"github.com/plaenen/eventstore/pkg/eventsourcing"
)

// SubscriptionSDK provides a unified, developer-friendly interface for the Subscription service.
// It combines all commands and queries into a single client that only requires a transport.
//
// Example usage:
//
//	transport, _ := nats.NewTransport(&nats.TransportConfig{...})
//	sdk := subscriptionv1.NewSubscriptionSDK(transport)
//
//	// Execute commands and queries
//	resp, err := sdk.CreateSubscription(ctx, &subscriptionv1.CreateSubscriptionCommand{...})
type SubscriptionSDK struct {
	client *SubscriptionClient
}

// NewSubscriptionSDK creates a new unified SDK for the Subscription service.
// It only requires a transport - all service clients are created automatically.
func NewSubscriptionSDK(transport eventsourcing.Transport) *SubscriptionSDK {
	return &SubscriptionSDK{
		client: NewSubscriptionClient(transport),
	}
}

// Commands

// CreateSubscription creates a new subscription
func (s *SubscriptionSDK) CreateSubscription(ctx context.Context, cmd *CreateSubscriptionCommand) (*CreateSubscriptionResponse, *eventsourcing.AppError) {
	return s.client.CreateSubscription(ctx, cmd)
}

// CancelSubscription executes cancelsubscription
func (s *SubscriptionSDK) CancelSubscription(ctx context.Context, cmd *CancelSubscriptionCommand) (*CancelSubscriptionResponse, *eventsourcing.AppError) {
	return s.client.CancelSubscription(ctx, cmd)
}

// Queries

// GetSubscription retrieves subscription
func (s *SubscriptionSDK) GetSubscription(ctx context.Context, query *GetSubscriptionRequest) (*GetSubscriptionResponse, *eventsourcing.AppError) {
	return s.client.GetSubscription(ctx, query)
}

// Transport returns the underlying transport used by this SDK.
// This can be useful for cleanup or advanced use cases.
func (s *SubscriptionSDK) Transport() eventsourcing.Transport {
	return s.client.transport
}

// Close closes the underlying transport connection.
// This is a convenience method equivalent to calling Transport().Close()
func (s *SubscriptionSDK) Close() error {
	return s.client.transport.Close()
}
