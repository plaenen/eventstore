// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: subscription/v1/subscription.proto

package subscriptionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/plaenen/eventstore/examples/subscription/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SubscriptionCommandServiceName is the fully-qualified name of the SubscriptionCommandService
	// service.
	SubscriptionCommandServiceName = "subscription.v1.SubscriptionCommandService"
	// SubscriptionQueryServiceName is the fully-qualified name of the SubscriptionQueryService service.
	SubscriptionQueryServiceName = "subscription.v1.SubscriptionQueryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionCommandServiceCreateSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionCommandService's CreateSubscription RPC.
	SubscriptionCommandServiceCreateSubscriptionProcedure = "/subscription.v1.SubscriptionCommandService/CreateSubscription"
	// SubscriptionCommandServiceCancelSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionCommandService's CancelSubscription RPC.
	SubscriptionCommandServiceCancelSubscriptionProcedure = "/subscription.v1.SubscriptionCommandService/CancelSubscription"
	// SubscriptionQueryServiceGetSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionQueryService's GetSubscription RPC.
	SubscriptionQueryServiceGetSubscriptionProcedure = "/subscription.v1.SubscriptionQueryService/GetSubscription"
)

// SubscriptionCommandServiceClient is a client for the subscription.v1.SubscriptionCommandService
// service.
type SubscriptionCommandServiceClient interface {
	// CreateSubscription creates a new subscription
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionCommand]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	// CancelSubscription cancels a subscription
	CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionCommand]) (*connect.Response[v1.CancelSubscriptionResponse], error)
}

// NewSubscriptionCommandServiceClient constructs a client for the
// subscription.v1.SubscriptionCommandService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionCommandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionCommandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	subscriptionCommandServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionCommandService").Methods()
	return &subscriptionCommandServiceClient{
		createSubscription: connect.NewClient[v1.CreateSubscriptionCommand, v1.CreateSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionCommandServiceCreateSubscriptionProcedure,
			connect.WithSchema(subscriptionCommandServiceMethods.ByName("CreateSubscription")),
			connect.WithClientOptions(opts...),
		),
		cancelSubscription: connect.NewClient[v1.CancelSubscriptionCommand, v1.CancelSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionCommandServiceCancelSubscriptionProcedure,
			connect.WithSchema(subscriptionCommandServiceMethods.ByName("CancelSubscription")),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionCommandServiceClient implements SubscriptionCommandServiceClient.
type subscriptionCommandServiceClient struct {
	createSubscription *connect.Client[v1.CreateSubscriptionCommand, v1.CreateSubscriptionResponse]
	cancelSubscription *connect.Client[v1.CancelSubscriptionCommand, v1.CancelSubscriptionResponse]
}

// CreateSubscription calls subscription.v1.SubscriptionCommandService.CreateSubscription.
func (c *subscriptionCommandServiceClient) CreateSubscription(ctx context.Context, req *connect.Request[v1.CreateSubscriptionCommand]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return c.createSubscription.CallUnary(ctx, req)
}

// CancelSubscription calls subscription.v1.SubscriptionCommandService.CancelSubscription.
func (c *subscriptionCommandServiceClient) CancelSubscription(ctx context.Context, req *connect.Request[v1.CancelSubscriptionCommand]) (*connect.Response[v1.CancelSubscriptionResponse], error) {
	return c.cancelSubscription.CallUnary(ctx, req)
}

// SubscriptionCommandServiceHandler is an implementation of the
// subscription.v1.SubscriptionCommandService service.
type SubscriptionCommandServiceHandler interface {
	// CreateSubscription creates a new subscription
	CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionCommand]) (*connect.Response[v1.CreateSubscriptionResponse], error)
	// CancelSubscription cancels a subscription
	CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionCommand]) (*connect.Response[v1.CancelSubscriptionResponse], error)
}

// NewSubscriptionCommandServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionCommandServiceHandler(svc SubscriptionCommandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionCommandServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionCommandService").Methods()
	subscriptionCommandServiceCreateSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionCommandServiceCreateSubscriptionProcedure,
		svc.CreateSubscription,
		connect.WithSchema(subscriptionCommandServiceMethods.ByName("CreateSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	subscriptionCommandServiceCancelSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionCommandServiceCancelSubscriptionProcedure,
		svc.CancelSubscription,
		connect.WithSchema(subscriptionCommandServiceMethods.ByName("CancelSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	return "/subscription.v1.SubscriptionCommandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionCommandServiceCreateSubscriptionProcedure:
			subscriptionCommandServiceCreateSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionCommandServiceCancelSubscriptionProcedure:
			subscriptionCommandServiceCancelSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionCommandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionCommandServiceHandler struct{}

func (UnimplementedSubscriptionCommandServiceHandler) CreateSubscription(context.Context, *connect.Request[v1.CreateSubscriptionCommand]) (*connect.Response[v1.CreateSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionCommandService.CreateSubscription is not implemented"))
}

func (UnimplementedSubscriptionCommandServiceHandler) CancelSubscription(context.Context, *connect.Request[v1.CancelSubscriptionCommand]) (*connect.Response[v1.CancelSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionCommandService.CancelSubscription is not implemented"))
}

// SubscriptionQueryServiceClient is a client for the subscription.v1.SubscriptionQueryService
// service.
type SubscriptionQueryServiceClient interface {
	// GetSubscription retrieves subscription details by ID
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
}

// NewSubscriptionQueryServiceClient constructs a client for the
// subscription.v1.SubscriptionQueryService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionQueryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SubscriptionQueryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	subscriptionQueryServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionQueryService").Methods()
	return &subscriptionQueryServiceClient{
		getSubscription: connect.NewClient[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse](
			httpClient,
			baseURL+SubscriptionQueryServiceGetSubscriptionProcedure,
			connect.WithSchema(subscriptionQueryServiceMethods.ByName("GetSubscription")),
			connect.WithClientOptions(opts...),
		),
	}
}

// subscriptionQueryServiceClient implements SubscriptionQueryServiceClient.
type subscriptionQueryServiceClient struct {
	getSubscription *connect.Client[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse]
}

// GetSubscription calls subscription.v1.SubscriptionQueryService.GetSubscription.
func (c *subscriptionQueryServiceClient) GetSubscription(ctx context.Context, req *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// SubscriptionQueryServiceHandler is an implementation of the
// subscription.v1.SubscriptionQueryService service.
type SubscriptionQueryServiceHandler interface {
	// GetSubscription retrieves subscription details by ID
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
}

// NewSubscriptionQueryServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionQueryServiceHandler(svc SubscriptionQueryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	subscriptionQueryServiceMethods := v1.File_subscription_v1_subscription_proto.Services().ByName("SubscriptionQueryService").Methods()
	subscriptionQueryServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		SubscriptionQueryServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(subscriptionQueryServiceMethods.ByName("GetSubscription")),
		connect.WithHandlerOptions(opts...),
	)
	return "/subscription.v1.SubscriptionQueryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionQueryServiceGetSubscriptionProcedure:
			subscriptionQueryServiceGetSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionQueryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionQueryServiceHandler struct{}

func (UnimplementedSubscriptionQueryServiceHandler) GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("subscription.v1.SubscriptionQueryService.GetSubscription is not implemented"))
}
