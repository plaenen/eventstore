package main

import (
	"fmt"

	"github.com/plaenen/eventsourcing/pkg/sdk"
	"github.com/plaenen/eventsourcing/pkg/unifiedsdk"
)

// Test that thin client can be created without a database

func main() {
	fmt.Println("=== Testing Thin Client Pattern ===")
	fmt.Println()

	// Test 1: Thin client (command sender) - NO DATABASE
	fmt.Println("1Ô∏è‚É£ Creating thin client (RoleCommandSender)...")
	thinClient, err := unifiedsdk.New(
		unifiedsdk.WithMode(sdk.DevelopmentMode), // Dev mode for testing
		unifiedsdk.WithRole(sdk.RoleCommandSender), // ‚Üê THIN CLIENT
		// NO WithSQLiteDSN - not needed!
	)
	if err != nil {
		fmt.Printf("‚ùå Failed: %v\n", err)
		return
	}
	defer thinClient.Close()

	if thinClient.Client().EventStore() == nil {
		fmt.Println("‚úÖ SUCCESS: Thin client has NO event store")
	} else {
		fmt.Println("‚ùå FAILED: Thin client should not have event store")
	}

	fmt.Println()

	// Test 2: Handler client - HAS DATABASE
	fmt.Println("2Ô∏è‚É£ Creating handler client (RoleCommandHandler)...")
	handlerClient, err := unifiedsdk.New(
		unifiedsdk.WithMode(sdk.DevelopmentMode),
		unifiedsdk.WithRole(sdk.RoleCommandHandler), // ‚Üê HANDLER
		unifiedsdk.WithSQLiteDSN(":memory:"), // ‚Üê Requires database
	)
	if err != nil {
		fmt.Printf("‚ùå Failed: %v\n", err)
		return
	}
	defer handlerClient.Close()

	if handlerClient.Client().EventStore() != nil {
		fmt.Println("‚úÖ SUCCESS: Handler client has event store")
	} else {
		fmt.Println("‚ùå FAILED: Handler client should have event store")
	}

	fmt.Println()

	// Test 3: Full-stack client - HAS DATABASE (default)
	fmt.Println("3Ô∏è‚É£ Creating full-stack client (RoleFullStack - default)...")
	fullstackClient, err := unifiedsdk.New(
		unifiedsdk.WithMode(sdk.DevelopmentMode),
		// Role defaults to RoleFullStack
		unifiedsdk.WithSQLiteDSN(":memory:"),
	)
	if err != nil {
		fmt.Printf("‚ùå Failed: %v\n", err)
		return
	}
	defer fullstackClient.Close()

	if fullstackClient.Client().EventStore() != nil {
		fmt.Println("‚úÖ SUCCESS: Full-stack client has event store")
	} else {
		fmt.Println("‚ùå FAILED: Full-stack client should have event store")
	}

	fmt.Println()

	// Test 4: Handler with empty DSN - SHOULD FAIL
	fmt.Println("4Ô∏è‚É£ Testing handler with empty DSN (should fail)...")
	_, err = unifiedsdk.New(
		unifiedsdk.WithMode(sdk.DevelopmentMode),
		unifiedsdk.WithRole(sdk.RoleCommandHandler),
		unifiedsdk.WithSQLiteDSN(""), // ‚Üê Explicitly empty DSN
	)
	if err != nil {
		fmt.Printf("‚úÖ SUCCESS: Correctly rejected (error: %v)\n", err)
	} else {
		fmt.Println("‚ùå FAILED: Should have required database for handler")
	}

	fmt.Println()
	fmt.Println("üéâ All tests passed!")
}
