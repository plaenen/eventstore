// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: checkpoints.sql

package sqlcgen

import (
	"context"
)

const deleteCheckpoint = `-- name: DeleteCheckpoint :exec
DELETE FROM projection_checkpoints
WHERE projection_name = ?
`

func (q *Queries) DeleteCheckpoint(ctx context.Context, projectionName string) error {
	_, err := q.exec(ctx, q.deleteCheckpointStmt, deleteCheckpoint, projectionName)
	return err
}

const loadCheckpoint = `-- name: LoadCheckpoint :one
SELECT projection_name, position, last_event_id, updated_at
FROM projection_checkpoints
WHERE projection_name = ?
`

func (q *Queries) LoadCheckpoint(ctx context.Context, projectionName string) (ProjectionCheckpoint, error) {
	row := q.queryRow(ctx, q.loadCheckpointStmt, loadCheckpoint, projectionName)
	var i ProjectionCheckpoint
	err := row.Scan(
		&i.ProjectionName,
		&i.Position,
		&i.LastEventID,
		&i.UpdatedAt,
	)
	return i, err
}

const saveCheckpoint = `-- name: SaveCheckpoint :exec
INSERT OR REPLACE INTO projection_checkpoints (projection_name, position, last_event_id, updated_at)
VALUES (?, ?, ?, ?)
`

type SaveCheckpointParams struct {
	ProjectionName string `json:"projection_name"`
	Position       int64  `json:"position"`
	LastEventID    string `json:"last_event_id"`
	UpdatedAt      int64  `json:"updated_at"`
}

func (q *Queries) SaveCheckpoint(ctx context.Context, arg SaveCheckpointParams) error {
	_, err := q.exec(ctx, q.saveCheckpointStmt, saveCheckpoint,
		arg.ProjectionName,
		arg.Position,
		arg.LastEventID,
		arg.UpdatedAt,
	)
	return err
}
