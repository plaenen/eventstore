// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: eventsourcing/options.proto

package eventsourcing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ServiceOptions declares which aggregate a command service operates on
// This is the PRIMARY source of truth for aggregate association
type ServiceOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// REQUIRED: The name of the aggregate this service operates on
	// Example: "Account", "Order", "User"
	AggregateName string `protobuf:"bytes,1,opt,name=aggregate_name,json=aggregateName,proto3" json:"aggregate_name,omitempty"`
	// REQUIRED: The proto message name that represents the aggregate root
	// Example: "Account" (refers to message Account)
	// This allows the generator to find the aggregate root message even across multiple files
	AggregateRootMessage string `protobuf:"bytes,2,opt,name=aggregate_root_message,json=aggregateRootMessage,proto3" json:"aggregate_root_message,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ServiceOptions) Reset() {
	*x = ServiceOptions{}
	mi := &file_eventsourcing_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOptions) ProtoMessage() {}

func (x *ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_eventsourcing_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOptions.ProtoReflect.Descriptor instead.
func (*ServiceOptions) Descriptor() ([]byte, []int) {
	return file_eventsourcing_options_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceOptions) GetAggregateName() string {
	if x != nil {
		return x.AggregateName
	}
	return ""
}

func (x *ServiceOptions) GetAggregateRootMessage() string {
	if x != nil {
		return x.AggregateRootMessage
	}
	return ""
}

// AggregateRootOptions marks a proto message as an aggregate root
// This is the ONLY option needed on the aggregate state message
type AggregateRootOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// REQUIRED: The field name that contains the aggregate ID
	// Example: "account_id", "order_id", "user_id"
	IdField string `protobuf:"bytes,1,opt,name=id_field,json=idField,proto3" json:"id_field,omitempty"`
	// OPTIONAL: Override the aggregate type name (defaults to message name)
	// Usually not needed unless message name differs from aggregate name
	TypeName      string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateRootOptions) Reset() {
	*x = AggregateRootOptions{}
	mi := &file_eventsourcing_options_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateRootOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateRootOptions) ProtoMessage() {}

func (x *AggregateRootOptions) ProtoReflect() protoreflect.Message {
	mi := &file_eventsourcing_options_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateRootOptions.ProtoReflect.Descriptor instead.
func (*AggregateRootOptions) Descriptor() ([]byte, []int) {
	return file_eventsourcing_options_proto_rawDescGZIP(), []int{1}
}

func (x *AggregateRootOptions) GetIdField() string {
	if x != nil {
		return x.IdField
	}
	return ""
}

func (x *AggregateRootOptions) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

// EventOptions marks a message as an event and associates it with an aggregate
// This is REQUIRED for all events to enable:
// - Projection SDK generation
// - Event catalog/discovery
// - Cross-file event organization
//
// Field Mapping & State Updates:
// - NO field_mapping option - developer handles in ApplyEvent implementation
// - NO applies_to_state option - developer controls which fields update
// - More flexible, explicit, and testable
type EventOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// REQUIRED: The aggregate this event belongs to
	// Must match the aggregate_name from the service
	AggregateName string `protobuf:"bytes,1,opt,name=aggregate_name,json=aggregateName,proto3" json:"aggregate_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventOptions) Reset() {
	*x = EventOptions{}
	mi := &file_eventsourcing_options_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOptions) ProtoMessage() {}

func (x *EventOptions) ProtoReflect() protoreflect.Message {
	mi := &file_eventsourcing_options_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOptions.ProtoReflect.Descriptor instead.
func (*EventOptions) Descriptor() ([]byte, []int) {
	return file_eventsourcing_options_proto_rawDescGZIP(), []int{2}
}

func (x *EventOptions) GetAggregateName() string {
	if x != nil {
		return x.AggregateName
	}
	return ""
}

var file_eventsourcing_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceOptions)(nil),
		Field:         50002,
		Name:          "eventsourcing.service",
		Tag:           "bytes,50002,opt,name=service",
		Filename:      "eventsourcing/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*AggregateRootOptions)(nil),
		Field:         50003,
		Name:          "eventsourcing.aggregate_root",
		Tag:           "bytes,50003,opt,name=aggregate_root",
		Filename:      "eventsourcing/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*EventOptions)(nil),
		Field:         50004,
		Name:          "eventsourcing.event",
		Tag:           "bytes,50004,opt,name=event",
		Filename:      "eventsourcing/options.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional eventsourcing.ServiceOptions service = 50002;
	E_Service = &file_eventsourcing_options_proto_extTypes[0]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional eventsourcing.AggregateRootOptions aggregate_root = 50003;
	E_AggregateRoot = &file_eventsourcing_options_proto_extTypes[1]
	// optional eventsourcing.EventOptions event = 50004;
	E_Event = &file_eventsourcing_options_proto_extTypes[2]
)

var File_eventsourcing_options_proto protoreflect.FileDescriptor

const file_eventsourcing_options_proto_rawDesc = "" +
	"\n" +
	"\x1beventsourcing/options.proto\x12\reventsourcing\x1a google/protobuf/descriptor.proto\"m\n" +
	"\x0eServiceOptions\x12%\n" +
	"\x0eaggregate_name\x18\x01 \x01(\tR\raggregateName\x124\n" +
	"\x16aggregate_root_message\x18\x02 \x01(\tR\x14aggregateRootMessage\"N\n" +
	"\x14AggregateRootOptions\x12\x19\n" +
	"\bid_field\x18\x01 \x01(\tR\aidField\x12\x1b\n" +
	"\ttype_name\x18\x02 \x01(\tR\btypeName\"5\n" +
	"\fEventOptions\x12%\n" +
	"\x0eaggregate_name\x18\x01 \x01(\tR\raggregateName:Z\n" +
	"\aservice\x12\x1f.google.protobuf.ServiceOptions\x18҆\x03 \x01(\v2\x1d.eventsourcing.ServiceOptionsR\aservice:m\n" +
	"\x0eaggregate_root\x12\x1f.google.protobuf.MessageOptions\x18ӆ\x03 \x01(\v2#.eventsourcing.AggregateRootOptionsR\raggregateRoot:T\n" +
	"\x05event\x12\x1f.google.protobuf.MessageOptions\x18Ԇ\x03 \x01(\v2\x1b.eventsourcing.EventOptionsR\x05eventBBZ@github.com/plaenen/eventstore/gen/go/eventsourcing;eventsourcingb\x06proto3"

var (
	file_eventsourcing_options_proto_rawDescOnce sync.Once
	file_eventsourcing_options_proto_rawDescData []byte
)

func file_eventsourcing_options_proto_rawDescGZIP() []byte {
	file_eventsourcing_options_proto_rawDescOnce.Do(func() {
		file_eventsourcing_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_eventsourcing_options_proto_rawDesc), len(file_eventsourcing_options_proto_rawDesc)))
	})
	return file_eventsourcing_options_proto_rawDescData
}

var file_eventsourcing_options_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_eventsourcing_options_proto_goTypes = []any{
	(*ServiceOptions)(nil),              // 0: eventsourcing.ServiceOptions
	(*AggregateRootOptions)(nil),        // 1: eventsourcing.AggregateRootOptions
	(*EventOptions)(nil),                // 2: eventsourcing.EventOptions
	(*descriptorpb.ServiceOptions)(nil), // 3: google.protobuf.ServiceOptions
	(*descriptorpb.MessageOptions)(nil), // 4: google.protobuf.MessageOptions
}
var file_eventsourcing_options_proto_depIdxs = []int32{
	3, // 0: eventsourcing.service:extendee -> google.protobuf.ServiceOptions
	4, // 1: eventsourcing.aggregate_root:extendee -> google.protobuf.MessageOptions
	4, // 2: eventsourcing.event:extendee -> google.protobuf.MessageOptions
	0, // 3: eventsourcing.service:type_name -> eventsourcing.ServiceOptions
	1, // 4: eventsourcing.aggregate_root:type_name -> eventsourcing.AggregateRootOptions
	2, // 5: eventsourcing.event:type_name -> eventsourcing.EventOptions
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	3, // [3:6] is the sub-list for extension type_name
	0, // [0:3] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eventsourcing_options_proto_init() }
func file_eventsourcing_options_proto_init() {
	if File_eventsourcing_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_eventsourcing_options_proto_rawDesc), len(file_eventsourcing_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_eventsourcing_options_proto_goTypes,
		DependencyIndexes: file_eventsourcing_options_proto_depIdxs,
		MessageInfos:      file_eventsourcing_options_proto_msgTypes,
		ExtensionInfos:    file_eventsourcing_options_proto_extTypes,
	}.Build()
	File_eventsourcing_options_proto = out.File
	file_eventsourcing_options_proto_goTypes = nil
	file_eventsourcing_options_proto_depIdxs = nil
}
