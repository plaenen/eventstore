// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: commands.sql

package sqlcgen

import (
	"context"
)

const checkCommandExists = `-- name: CheckCommandExists :one
SELECT command_id
FROM processed_commands
WHERE command_id = ?
`

func (q *Queries) CheckCommandExists(ctx context.Context, commandID string) (string, error) {
	row := q.queryRow(ctx, q.checkCommandExistsStmt, checkCommandExists, commandID)
	var command_id string
	err := row.Scan(&command_id)
	return command_id, err
}

const cleanExpiredCommands = `-- name: CleanExpiredCommands :execrows
DELETE FROM processed_commands
WHERE expires_at < ?
`

func (q *Queries) CleanExpiredCommands(ctx context.Context, expiresAt int64) (int64, error) {
	result, err := q.exec(ctx, q.cleanExpiredCommandsStmt, cleanExpiredCommands, expiresAt)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProcessedCommand = `-- name: GetProcessedCommand :one
SELECT aggregate_id, processed_at, event_ids
FROM processed_commands
WHERE command_id = ? AND expires_at > ?
`

type GetProcessedCommandParams struct {
	CommandID string `json:"command_id"`
	ExpiresAt int64  `json:"expires_at"`
}

type GetProcessedCommandRow struct {
	AggregateID string `json:"aggregate_id"`
	ProcessedAt int64  `json:"processed_at"`
	EventIds    string `json:"event_ids"`
}

func (q *Queries) GetProcessedCommand(ctx context.Context, arg GetProcessedCommandParams) (GetProcessedCommandRow, error) {
	row := q.queryRow(ctx, q.getProcessedCommandStmt, getProcessedCommand, arg.CommandID, arg.ExpiresAt)
	var i GetProcessedCommandRow
	err := row.Scan(&i.AggregateID, &i.ProcessedAt, &i.EventIds)
	return i, err
}

const insertProcessedCommand = `-- name: InsertProcessedCommand :exec
INSERT INTO processed_commands (command_id, aggregate_id, processed_at, expires_at, event_ids)
VALUES (?, ?, ?, ?, ?)
`

type InsertProcessedCommandParams struct {
	CommandID   string `json:"command_id"`
	AggregateID string `json:"aggregate_id"`
	ProcessedAt int64  `json:"processed_at"`
	ExpiresAt   int64  `json:"expires_at"`
	EventIds    string `json:"event_ids"`
}

func (q *Queries) InsertProcessedCommand(ctx context.Context, arg InsertProcessedCommandParams) error {
	_, err := q.exec(ctx, q.insertProcessedCommandStmt, insertProcessedCommand,
		arg.CommandID,
		arg.AggregateID,
		arg.ProcessedAt,
		arg.ExpiresAt,
		arg.EventIds,
	)
	return err
}
