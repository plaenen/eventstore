// Code generated by generate-unified-sdk. DO NOT EDIT.

package unifiedsdk

import (
	"github.com/plaenen/eventsourcing/pkg/sdk"
	accountv1 "github.com/plaenen/eventsourcing/examples/pb/account/v1"
)

// SDK provides a unified interface to all service clients.
// Use New() to create an instance, then access service clients via properties.
//
// Example:
//   s, _ := unifiedsdk.New(unifiedsdk.WithMode(unifiedsdk.DevelopmentMode))
//   s.Account.OpenAccount(ctx, cmd, principalID)
type SDK struct {
	client *sdk.Client
	Account *accountv1.AccountClient
}

// New creates a new unified SDK instance with all service clients.
func New(opts ...Option) (*SDK, error) {
	// Build configuration
	config := sdk.DefaultConfig()
	for _, opt := range opts {
		opt(config)
	}

	// Create underlying client
	client, err := sdk.NewClient(config)
	if err != nil {
		return nil, err
	}

	// Initialize all service clients
	return &SDK{
		client: client,
		Account: accountv1.NewAccountClient(client),
	}, nil
}

// Option is a functional option for configuring the SDK.
type Option func(*sdk.Config)

// WithMode sets the operational mode.
func WithMode(mode sdk.Mode) Option {
	return func(c *sdk.Config) {
		c.Mode = mode
	}
}

// WithRole sets the client role.
// - sdk.RoleFullStack: Full client with event store (default)
// - sdk.RoleCommandSender: Thin client, only sends commands (no event store)
// - sdk.RoleCommandHandler: Handles commands, requires event store
func WithRole(role sdk.Role) Option {
	return func(c *sdk.Config) {
		c.Role = role
	}
}

// WithNATSURL sets the NATS server URL.
func WithNATSURL(url string) Option {
	return func(c *sdk.Config) {
		c.NATS.URL = url
	}
}

// WithSQLiteDSN sets the SQLite database DSN.
// Only required for RoleFullStack and RoleCommandHandler.
func WithSQLiteDSN(dsn string) Option {
	return func(c *sdk.Config) {
		c.SQLite.DSN = dsn
	}
}

// WithWALMode enables or disables WAL mode for SQLite.
func WithWALMode(enabled bool) Option {
	return func(c *sdk.Config) {
		c.SQLite.WALMode = enabled
	}
}

// Client returns the underlying SDK client for advanced usage.
func (s *SDK) Client() *sdk.Client {
	return s.client
}

// Close closes all connections and releases resources.
func (s *SDK) Close() error {
	return s.client.Close()
}
